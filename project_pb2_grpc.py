# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import project_pb2 as project__pb2


class LogInServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckLogIn = channel.unary_unary(
                '/project.LogInService/CheckLogIn',
                request_serializer=project__pb2.CredentialsRequest.SerializeToString,
                response_deserializer=project__pb2.CredentialsResponse.FromString,
                )


class LogInServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CheckLogIn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogInServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckLogIn': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckLogIn,
                    request_deserializer=project__pb2.CredentialsRequest.FromString,
                    response_serializer=project__pb2.CredentialsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'project.LogInService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LogInService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CheckLogIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project.LogInService/CheckLogIn',
            project__pb2.CredentialsRequest.SerializeToString,
            project__pb2.CredentialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SearcherServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchOne = channel.unary_unary(
                '/project.SearcherService/SearchOne',
                request_serializer=project__pb2.OneRequest.SerializeToString,
                response_deserializer=project__pb2.OneResponse.FromString,
                )
        self.SearchView = channel.unary_stream(
                '/project.SearcherService/SearchView',
                request_serializer=project__pb2.ViewRequest.SerializeToString,
                response_deserializer=project__pb2.ViewResponse.FromString,
                )


class SearcherServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SearchOne(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchView(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SearcherServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchOne': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchOne,
                    request_deserializer=project__pb2.OneRequest.FromString,
                    response_serializer=project__pb2.OneResponse.SerializeToString,
            ),
            'SearchView': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchView,
                    request_deserializer=project__pb2.ViewRequest.FromString,
                    response_serializer=project__pb2.ViewResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'project.SearcherService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SearcherService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SearchOne(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project.SearcherService/SearchOne',
            project__pb2.OneRequest.SerializeToString,
            project__pb2.OneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/project.SearcherService/SearchView',
            project__pb2.ViewRequest.SerializeToString,
            project__pb2.ViewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class readerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.viewHeadlines = channel.unary_stream(
                '/project.reader/viewHeadlines',
                request_serializer=project__pb2.HeadRequest.SerializeToString,
                response_deserializer=project__pb2.HeadResponse.FromString,
                )
        self.showBlog = channel.unary_unary(
                '/project.reader/showBlog',
                request_serializer=project__pb2.BlogRequest.SerializeToString,
                response_deserializer=project__pb2.BlogResponse.FromString,
                )
        self.commentBlog = channel.unary_unary(
                '/project.reader/commentBlog',
                request_serializer=project__pb2.CommentRequest.SerializeToString,
                response_deserializer=project__pb2.CommentResponse.FromString,
                )


class readerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def viewHeadlines(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def showBlog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commentBlog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_readerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'viewHeadlines': grpc.unary_stream_rpc_method_handler(
                    servicer.viewHeadlines,
                    request_deserializer=project__pb2.HeadRequest.FromString,
                    response_serializer=project__pb2.HeadResponse.SerializeToString,
            ),
            'showBlog': grpc.unary_unary_rpc_method_handler(
                    servicer.showBlog,
                    request_deserializer=project__pb2.BlogRequest.FromString,
                    response_serializer=project__pb2.BlogResponse.SerializeToString,
            ),
            'commentBlog': grpc.unary_unary_rpc_method_handler(
                    servicer.commentBlog,
                    request_deserializer=project__pb2.CommentRequest.FromString,
                    response_serializer=project__pb2.CommentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'project.reader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class reader(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def viewHeadlines(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/project.reader/viewHeadlines',
            project__pb2.HeadRequest.SerializeToString,
            project__pb2.HeadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def showBlog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project.reader/showBlog',
            project__pb2.BlogRequest.SerializeToString,
            project__pb2.BlogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commentBlog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project.reader/commentBlog',
            project__pb2.CommentRequest.SerializeToString,
            project__pb2.CommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
